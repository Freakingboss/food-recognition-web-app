<div class="meal">
    <h3>Nova refeição</h3>
    <input id="input-img" type="file" accept="image/*" capture="environment">
    <div class="img-container">
        <img id="foodImage" src="" alt="">
    </div>
    <h1 id="meal-date">-</h1>
    <ul class="foods">
        <li class="food-item"><span class="delete-food-button">X</span></li>
    </ul>
</div>
<button id="cancel-meal-button">Cancelar</button>
<button id="save-meal-button">Salvar</button>

<!-- Load Tensorflow and Teachable Machine models -->
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
<script>
const modelURL = '/ml_models/tm-my-image-model/';
let model, maxPredictions;

async function init() {
    const jsonModelURL = modelURL + 'model.json';
    const metadataURL = modelURL + 'metadata.json';

    model = await tmImage.load(jsonModelURL, metadataURL);
    console.log("Model loaded.");
    maxPredictions = model.getTotalClasses();
}
init();

async function uploadImage() {
    let uploadedFile = document.getElementById("input-img").files[0];
    let imgContainer = document.getElementById('foodImage');
    imgContainer.src = URL.createObjectURL(uploadedFile);
}

async function predict() {
    let response = await model.predict(document.getElementById('foodImage'));
    return response;
}

const imgTag = document.getElementById('foodImage');
imgTag.addEventListener('load', async e =>{
    let predictedFood = {};
    const response = await predict();
    predictedFood = myNewMeal.getFoodWithHighestProbability(response);

    if (Object.keys(predictedFood) > 0) {
        let ul = document.getElementsByClassName('foods')[0];
        let li = document.createElement('li');
        // let textNode = document.createTextNode(predictedFood.className);
        let textNode = document.createTextNode("Hi");
        li.appendChild(textNode);
        ul.appendChild(li);
    }
}, false);

const fileInput = document.getElementById("input-img");
fileInput.addEventListener('change', e => {
    uploadImage();
}, false);
</script>
<script>

class Meal {
    constructor(mealObj) {
        this.myMeal = {
            userId: null,
            meal: {
                mealId: null,
                dateTime: '',
                mealName: '',
                totalKcal: 0
            },
            food: [
                {
                    foodId: '',
                    foodName: '',
                    kcal: ''
                }
            ]
        };
    }

    // createMeal() {
    //     this.myMeal.meal.dateTime = new Date();
    // }

    // editMealName(mealName) {
    //     this.myMeal.meal.mealName = mealName;
    // }

    // async getMeal() {
    //     try {
    //         const response = await fetch('/getMeal');
    //         const resJson = await response.json();
    //         console.log(resJson);
    //         this.myMeal = resJson;
    //         return resJson;
    //     } catch (error) {
    //         throw new Error('We had a problem retrieving your meal from the server.');
    //     }
    // }

    mealSucessMessage() {
        console.log("Objeto refeição criado com sucesso!");
    }

    addFood(food) {
        let predictedFood = this.getFoodWithHighestProbability(food);

        // Get food info in the food table
        // let foodInfo = await getFoodInfo('/get-food-info', predictedFood.className,);

        // Add food to the meal
        this.myMeal.food.push({
            foodId: food.foodId,
            foodName: food.foodName,
            kcal: food.kcal
        });

        return;
    }

    async getFoodInfo(url, data) {
        let postOptions = {
            method: 'POST',
            mode: 'CORS',
            cache: 'no-cache',
            credentials: 'omit',
            headers: {
                'Content-Type': 'application/json'
            },
            referrer: 'no-referrer',
            body: JSON.stringify(data)
        }
        try {
        let foodInfo = await fetch(url, postOptions);
        console.log('Sucesso: ', JSON.stringify(foodInfo));
        } catch (error) {
            console.log('Error:',  error);
        }
        return await foodInfo.json();
    }

    getFoodWithHighestProbability(predictions) {
        let prob;
        let highestProb = -1;
        let highestPrediction;
        predictions.forEach((prediction, index) => {
            console.log(`Prediction ${index}: ${prediction.probability}`);
            prob = prediction.probability;
            if (prob > highestProb) {
                highestProb = prob;
                highestPrediction = prediction;
            };
        });
        return highestPrediction;
    }

}

let myNewMeal = new Meal();
myNewMeal.mealSucessMessage();
</script>